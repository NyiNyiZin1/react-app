{"ast":null,"code":"var _jsxFileName = \"D:\\\\iTRMS\\\\react-demo\\\\src\\\\Components\\\\dice\\\\Diceapp.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Die from \"./Die\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [dice, setDice] = React.useState(allNewDice());\n  function allNewDice() {\n    const newDice = [];\n    for (let i = 0; i < 10; i++) {\n      newDice.push({\n        value: Math.ceil(Math.random() * 6),\n        isHeld: false,\n        id: nanoid()\n      });\n    }\n    return newDice;\n  }\n  function rollDice() {\n    setDice(allNewDice());\n  }\n\n  /**\r\n   * Challenge: Update the `holdDice` function to flip\r\n   * the `isHeld` property on the object in the array\r\n   * that was clicked, based on the `id` prop passed\r\n   * into the function.\r\n   * \r\n   * Hint: as usual, there's > 1 way to accomplish this.\r\n   * I'll be using `dice.map()` and checking for the `id`\r\n   * of the die to determine which one to flip `isHeld` on,\r\n   * but you can do whichever way makes the most sense to you.\r\n   */\n  function holdDice(id) {\n    setDice(oldDice => oldDice.map(die => {\n      return die.id === id ? {\n        ...die,\n        isHeld: !die.isHeld\n      } : die;\n    }));\n  }\n  const diceElements = dice.map(die => /*#__PURE__*/_jsxDEV(Die, {\n    value: die.value,\n    isHeld: die.isHeld,\n    holdDice: () => holdDice(die.id)\n  }, die.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: diceElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"roll-dice\",\n      onClick: rollDice,\n      children: \"Roll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"FBcbDbTSXYNs4QNsRKPH911OvUI=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Die","nanoid","jsxDEV","_jsxDEV","App","_s","dice","setDice","useState","allNewDice","newDice","i","push","value","Math","ceil","random","isHeld","id","rollDice","holdDice","oldDice","map","die","diceElements","fileName","_jsxFileName","lineNumber","columnNumber","children","className","onClick","_c","$RefreshReg$"],"sources":["D:/iTRMS/react-demo/src/Components/dice/Diceapp.js"],"sourcesContent":["import React from \"react\"\r\nimport Die from \"./Die\"\r\nimport {nanoid} from \"nanoid\"\r\n\r\nexport default function App() {\r\n\r\n    const [dice, setDice] = React.useState(allNewDice())\r\n    \r\n    function allNewDice() {\r\n        const newDice = []\r\n        for (let i = 0; i < 10; i++) {\r\n            newDice.push({\r\n                value: Math.ceil(Math.random() * 6),\r\n                isHeld: false,\r\n                id: nanoid()\r\n            })\r\n        }\r\n        return newDice\r\n    }\r\n    \r\n    function rollDice() {\r\n        setDice(allNewDice())\r\n    }\r\n    \r\n/**\r\n * Challenge: Update the `holdDice` function to flip\r\n * the `isHeld` property on the object in the array\r\n * that was clicked, based on the `id` prop passed\r\n * into the function.\r\n * \r\n * Hint: as usual, there's > 1 way to accomplish this.\r\n * I'll be using `dice.map()` and checking for the `id`\r\n * of the die to determine which one to flip `isHeld` on,\r\n * but you can do whichever way makes the most sense to you.\r\n */\r\n    function holdDice(id) {\r\n        setDice(oldDice => oldDice.map(die => {\r\n            return die.id === id ? \r\n                {...die, isHeld: !die.isHeld} :\r\n                die\r\n        }))\r\n    }\r\n    \r\n    const diceElements = dice.map(die => (\r\n        <Die \r\n            key={die.id} \r\n            value={die.value} \r\n            isHeld={die.isHeld} \r\n            holdDice={() => holdDice(die.id)}\r\n        />\r\n    ))\r\n    \r\n    return (\r\n        <main>\r\n            <div className=\"dice-container\">\r\n                {diceElements}\r\n            </div>\r\n            <button className=\"roll-dice\" onClick={rollDice}>Roll</button>\r\n        </main>\r\n    )\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,OAAO;AACvB,SAAQC,MAAM,QAAO,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7B,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAE1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,KAAK,CAACS,QAAQ,CAACC,UAAU,EAAE,CAAC;EAEpD,SAASA,UAAUA,CAAA,EAAG;IAClB,MAAMC,OAAO,GAAG,EAAE;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MACzBD,OAAO,CAACE,IAAI,CAAC;QACTC,KAAK,EAAEC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC;QACnCC,MAAM,EAAE,KAAK;QACbC,EAAE,EAAEjB,MAAM;MACd,CAAC,CAAC;IACN;IACA,OAAOS,OAAO;EAClB;EAEA,SAASS,QAAQA,CAAA,EAAG;IAChBZ,OAAO,CAACE,UAAU,EAAE,CAAC;EACzB;;EAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASW,QAAQA,CAACF,EAAE,EAAE;IAClBX,OAAO,CAACc,OAAO,IAAIA,OAAO,CAACC,GAAG,CAACC,GAAG,IAAI;MAClC,OAAOA,GAAG,CAACL,EAAE,KAAKA,EAAE,GAChB;QAAC,GAAGK,GAAG;QAAEN,MAAM,EAAE,CAACM,GAAG,CAACN;MAAM,CAAC,GAC7BM,GAAG;IACX,CAAC,CAAC,CAAC;EACP;EAEA,MAAMC,YAAY,GAAGlB,IAAI,CAACgB,GAAG,CAACC,GAAG,iBAC7BpB,OAAA,CAACH,GAAG;IAEAa,KAAK,EAAEU,GAAG,CAACV,KAAM;IACjBI,MAAM,EAAEM,GAAG,CAACN,MAAO;IACnBG,QAAQ,EAAEA,CAAA,KAAMA,QAAQ,CAACG,GAAG,CAACL,EAAE;EAAE,GAH5BK,GAAG,CAACL,EAAE;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAKlB,CAAC;EAEF,oBACIzB,OAAA;IAAA0B,QAAA,gBACI1B,OAAA;MAAK2B,SAAS,EAAC,gBAAgB;MAAAD,QAAA,EAC1BL;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACX,eACNzB,OAAA;MAAQ2B,SAAS,EAAC,WAAW;MAACC,OAAO,EAAEZ,QAAS;MAAAU,QAAA,EAAC;IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC3D;AAEf;AAACvB,EAAA,CAxDuBD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}